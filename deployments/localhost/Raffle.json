{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entrancefee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_Not_Open",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferUnsuccessful",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "checkUpkeep_Not_Needed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "changerafflestate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70b5f6618d17eb645580e48276d625be7624c2a1d1cc2abe6512cdd71b49abdc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1232334",
    "logsBloom": "0x
    "blockHash": "0x421940e640fbf8c47b8b758e6456160653467816324b1f2ad2b3c5fa341bfc98",
    "transactionHash": "0x70b5f6618d17eb645580e48276d625be7624c2a1d1cc2abe6512cdd71b49abdc",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1232334",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "1",
    "500000",
    "0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae",
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "09f1ffce60da65524624b907f59883c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entrancefee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_Not_Open\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferUnsuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"checkUpkeep_Not_Needed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"changerafflestate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\",\"keccak256\":\"0xa9dade98ec5e0a81491bb68b39adee7cfcc3bbeacec57b18b8a6072a0c5eb71c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\n// Raffle\\r\\n// Enter the lottery (paying some amount)\\r\\n// Pick a random winner (verifiably random)\\r\\n// Winner to be selected every X minutes -> completly automate\\r\\n// Chainlink Oracle -> Randomness, Automated Execution (Chainlink Keepers)\\r\\n\\r\\nerror Raffle__SendMoreToEnterRaffle();\\r\\nevent RequestedRandomWords(uint256 indexed requestId);\\r\\nerror Raffle_TransferUnsuccessful();\\r\\nerror Raffle_Not_Open();\\r\\nerror checkUpkeep_Not_Needed(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 raffleState\\r\\n);\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatible {\\r\\n    uint256 immutable i_entrancefee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint256 private immutable i_subscriptionId;\\r\\n    address payable private recentWinner;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant num_words = 1;\\r\\n    uint16 private constant request_confirmation = 3;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint256 private s_isOpen;\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    RaffleState private s_raffle_state;\\r\\n\\r\\n    event raffleEnter(address indexed player);\\r\\n    event winnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entrancefee,\\r\\n        uint256 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        bytes32 gasLane,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entrancefee = entrancefee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_gasLane = gasLane;\\r\\n        s_raffle_state = RaffleState.OPEN;\\r\\n        i_interval = interval;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory\\r\\n    ) public view override returns (bool upkeepNeeded, bytes memory) {\\r\\n        bool isOpen = (s_raffle_state == RaffleState.OPEN);\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata) external override {\\r\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n    if (!upkeepNeeded) {\\r\\n        revert checkUpkeep_Not_Needed(\\r\\n            address(this).balance,\\r\\n            s_players.length,\\r\\n            uint256(s_raffle_state)\\r\\n        );\\r\\n    }\\r\\n    s_raffle_state = RaffleState.CALCULATING;\\r\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n        i_gasLane,\\r\\n        uint64(i_subscriptionId),\\r\\n        request_confirmation,\\r\\n        i_callbackGasLimit,\\r\\n        num_words\\r\\n    );\\r\\n    emit RequestedRandomWords(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        s_raffle_state = RaffleState.CALCULATING;\\r\\n        uint256 index = randomWords[0] % s_players.length;\\r\\n        address payable randomWinner = s_players[index];\\r\\n        recentWinner = randomWinner;\\r\\n        s_raffle_state = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle_TransferUnsuccessful();\\r\\n        }\\r\\n        emit winnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (s_raffle_state != RaffleState.OPEN) {\\r\\n            revert Raffle_Not_Open();\\r\\n        }\\r\\n        if (msg.value < i_entrancefee) {\\r\\n            revert Raffle__SendMoreToEnterRaffle();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit raffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function changerafflestate() public {\\r\\n        if (s_raffle_state == RaffleState.OPEN) {\\r\\n            s_raffle_state = RaffleState.CALCULATING;\\r\\n        } else {\\r\\n            s_raffle_state = RaffleState.OPEN;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffle_state;\\r\\n    }\\r\\n\\r\\n    function getLastTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entrancefee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address payable) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x00dcb185847d5e0dbf4cf91c7339466f517b16214465b980434221bf1ca16aa8\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b506040516118063803806118068339818101604052810190610033919061021c565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508263ffffffff166101008163ffffffff16815250508161012081815250506000600460006101000a81548160ff021916908360018111156100f1576100f06102a9565b5b0217905550806101408181525050426003819055505050505050506102d8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014182610116565b9050919050565b61015181610136565b811461015c57600080fd5b50565b60008151905061016e81610148565b92915050565b6000819050919050565b61018781610174565b811461019257600080fd5b50565b6000815190506101a48161017e565b92915050565b600063ffffffff82169050919050565b6101c3816101aa565b81146101ce57600080fd5b50565b6000815190506101e0816101ba565b92915050565b6000819050919050565b6101f9816101e6565b811461020457600080fd5b50565b600081519050610216816101f0565b92915050565b60008060008060008060c0878903121561023957610238610111565b5b600061024789828a0161015f565b965050602061025889828a01610195565b955050604061026989828a01610195565b945050606061027a89828a016101d1565b935050608061028b89828a01610207565b92505060a061029c89828a01610195565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114bf610347600039600081816107310152610838015260006105c80152600061060c015260006105e90152600061058c01526000818161026a01526103d40152600081816102a701526102fb01526114bf6000f3fe60806040526004361061009c5760003560e01c8063473f1ddc11610064578063473f1ddc146101535780636e04ff0d1461017e5780638a84c58e146101bc57806391ad27b4146101d3578063c1c244e8146101fe578063e55ae4e8146102295761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b6610266565b6040516100c39190610c0d565b60405180910390f35b3480156100d857600080fd5b506100e161028e565b6040516100ee9190610c9f565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610e53565b6102a5565b005b610128610365565b005b34801561013657600080fd5b50610151600480360381019061014c9190610f0a565b6104d4565b005b34801561015f57600080fd5b506101686106c5565b6040516101759190610f98565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190611068565b6106ef565b6040516101b392919061114b565b60405180910390f35b3480156101c857600080fd5b506101d161079b565b005b3480156101df57600080fd5b506101e8610834565b6040516101f59190610c0d565b60405180910390f35b34801561020a57600080fd5b5061021361085c565b6040516102209190610c0d565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061117b565b610866565b60405161025d91906111c9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161034e9291906111e4565b60405180910390fd5b61036182826108ad565b5050565b6000600181111561037957610378610c28565b5b600460009054906101000a900460ff16600181111561039b5761039a610c28565b5b146103d2576040517f286c89dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000034101561042c576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b60006104ee604051806020016040528060008152506106ef565b5090508061055d5747600080549050600460009054906101000a900460ff16600181111561051f5761051e610c28565b5b6040517f5711a4030000000000000000000000000000000000000000000000000000000081526004016105549392919061120d565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561058357610582610c28565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161064d9594939291906112bc565b6020604051808303816000875af115801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190611324565b9050807fc3d0c9fbc1987665462eec0262eb7fc743a27d411fd3a0b9c20c1c64d99347d360405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600080600181111561070857610707610c28565b5b600460009054906101000a900460ff16600181111561072a57610729610c28565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261075e9190611380565b1190506000806000805490501190506000804711905083801561077e5750825b80156107875750815b80156107905750805b955050505050915091565b600060018111156107af576107ae610c28565b5b600460009054906101000a900460ff1660018111156107d1576107d0610c28565b5b03610806576001600460006101000a81548160ff021916908360018111156107fc576107fb610c28565b5b0217905550610832565b6000600460006101000a81548160ff0219169083600181111561082c5761082b610c28565b5b02179055505b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b600080828154811061087b5761087a6113b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001600460006101000a81548160ff021916908360018111156108d3576108d2610c28565b5b021790555060008080549050826000815181106108f3576108f26113b4565b5b60200260200101516109059190611412565b9050600080828154811061091c5761091b6113b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff021916908360018111156109b0576109af610c28565b5b0217905550600067ffffffffffffffff8111156109d0576109cf610d10565b5b6040519080825280602002602001820160405280156109fe5781602001602082028036833780820191505090505b5060009080519060200190610a14929190610b4d565b50426003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a6490611474565b60006040518083038185875af1925050503d8060008114610aa1576040519150601f19603f3d011682016040523d82523d6000602084013e610aa6565b606091505b5050905080610ae1576040517f5714df0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc6579160200282015b82811115610bc55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b6d565b5b509050610bd39190610bd7565b5090565b5b80821115610bf0576000816000905550600101610bd8565b5090565b6000819050919050565b610c0781610bf4565b82525050565b6000602082019050610c226000830184610bfe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6857610c67610c28565b5b50565b6000819050610c7982610c57565b919050565b6000610c8982610c6b565b9050919050565b610c9981610c7e565b82525050565b6000602082019050610cb46000830184610c90565b92915050565b6000604051905090565b600080fd5b600080fd5b610cd781610bf4565b8114610ce257600080fd5b50565b600081359050610cf481610cce565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4882610cff565b810181811067ffffffffffffffff82111715610d6757610d66610d10565b5b80604052505050565b6000610d7a610cba565b9050610d868282610d3f565b919050565b600067ffffffffffffffff821115610da657610da5610d10565b5b602082029050602081019050919050565b600080fd5b6000610dcf610dca84610d8b565b610d70565b90508083825260208201905060208402830185811115610df257610df1610db7565b5b835b81811015610e1b5780610e078882610ce5565b845260208401935050602081019050610df4565b5050509392505050565b600082601f830112610e3a57610e39610cfa565b5b8135610e4a848260208601610dbc565b91505092915050565b60008060408385031215610e6a57610e69610cc4565b5b6000610e7885828601610ce5565b925050602083013567ffffffffffffffff811115610e9957610e98610cc9565b5b610ea585828601610e25565b9150509250929050565b600080fd5b60008083601f840112610eca57610ec9610cfa565b5b8235905067ffffffffffffffff811115610ee757610ee6610eaf565b5b602083019150836001820283011115610f0357610f02610db7565b5b9250929050565b60008060208385031215610f2157610f20610cc4565b5b600083013567ffffffffffffffff811115610f3f57610f3e610cc9565b5b610f4b85828601610eb4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f8282610f57565b9050919050565b610f9281610f77565b82525050565b6000602082019050610fad6000830184610f89565b92915050565b600080fd5b600067ffffffffffffffff821115610fd357610fd2610d10565b5b610fdc82610cff565b9050602081019050919050565b82818337600083830152505050565b600061100b61100684610fb8565b610d70565b90508281526020810184848401111561102757611026610fb3565b5b611032848285610fe9565b509392505050565b600082601f83011261104f5761104e610cfa565b5b813561105f848260208601610ff8565b91505092915050565b60006020828403121561107e5761107d610cc4565b5b600082013567ffffffffffffffff81111561109c5761109b610cc9565b5b6110a88482850161103a565b91505092915050565b60008115159050919050565b6110c6816110b1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111065780820151818401526020810190506110eb565b60008484015250505050565b600061111d826110cc565b61112781856110d7565b93506111378185602086016110e8565b61114081610cff565b840191505092915050565b600060408201905061116060008301856110bd565b81810360208301526111728184611112565b90509392505050565b60006020828403121561119157611190610cc4565b5b600061119f84828501610ce5565b91505092915050565b60006111b382610f57565b9050919050565b6111c3816111a8565b82525050565b60006020820190506111de60008301846111ba565b92915050565b60006040820190506111f96000830185610f89565b6112066020830184610f89565b9392505050565b60006060820190506112226000830186610bfe565b61122f6020830185610bfe565b61123c6040830184610bfe565b949350505050565b6000819050919050565b61125781611244565b82525050565b600067ffffffffffffffff82169050919050565b61127a8161125d565b82525050565b600061ffff82169050919050565b61129781611280565b82525050565b600063ffffffff82169050919050565b6112b68161129d565b82525050565b600060a0820190506112d1600083018861124e565b6112de6020830187611271565b6112eb604083018661128e565b6112f860608301856112ad565b61130560808301846112ad565b9695505050505050565b60008151905061131e81610cce565b92915050565b60006020828403121561133a57611339610cc4565b5b60006113488482850161130f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061138b82610bf4565b915061139683610bf4565b92508282039050818111156113ae576113ad611351565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061141d82610bf4565b915061142883610bf4565b925082611438576114376113e3565b5b828206905092915050565b600081905092915050565b50565b600061145e600083611443565b91506114698261144e565b600082019050919050565b600061147f82611451565b915081905091905056fea2646970667358221220ccee18e063c7611cccf3c26cd5e5905607c6f39a4a28620f567a15461978974f64736f6c634300081c0033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063473f1ddc11610064578063473f1ddc146101535780636e04ff0d1461017e5780638a84c58e146101bc57806391ad27b4146101d3578063c1c244e8146101fe578063e55ae4e8146102295761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b6610266565b6040516100c39190610c0d565b60405180910390f35b3480156100d857600080fd5b506100e161028e565b6040516100ee9190610c9f565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610e53565b6102a5565b005b610128610365565b005b34801561013657600080fd5b50610151600480360381019061014c9190610f0a565b6104d4565b005b34801561015f57600080fd5b506101686106c5565b6040516101759190610f98565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190611068565b6106ef565b6040516101b392919061114b565b60405180910390f35b3480156101c857600080fd5b506101d161079b565b005b3480156101df57600080fd5b506101e8610834565b6040516101f59190610c0d565b60405180910390f35b34801561020a57600080fd5b5061021361085c565b6040516102209190610c0d565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b919061117b565b610866565b60405161025d91906111c9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161034e9291906111e4565b60405180910390fd5b61036182826108ad565b5050565b6000600181111561037957610378610c28565b5b600460009054906101000a900460ff16600181111561039b5761039a610c28565b5b146103d2576040517f286c89dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000034101561042c576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b60006104ee604051806020016040528060008152506106ef565b5090508061055d5747600080549050600460009054906101000a900460ff16600181111561051f5761051e610c28565b5b6040517f5711a4030000000000000000000000000000000000000000000000000000000081526004016105549392919061120d565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561058357610582610c28565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161064d9594939291906112bc565b6020604051808303816000875af115801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190611324565b9050807fc3d0c9fbc1987665462eec0262eb7fc743a27d411fd3a0b9c20c1c64d99347d360405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600080600181111561070857610707610c28565b5b600460009054906101000a900460ff16600181111561072a57610729610c28565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261075e9190611380565b1190506000806000805490501190506000804711905083801561077e5750825b80156107875750815b80156107905750805b955050505050915091565b600060018111156107af576107ae610c28565b5b600460009054906101000a900460ff1660018111156107d1576107d0610c28565b5b03610806576001600460006101000a81548160ff021916908360018111156107fc576107fb610c28565b5b0217905550610832565b6000600460006101000a81548160ff0219169083600181111561082c5761082b610c28565b5b02179055505b565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b600080828154811061087b5761087a6113b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001600460006101000a81548160ff021916908360018111156108d3576108d2610c28565b5b021790555060008080549050826000815181106108f3576108f26113b4565b5b60200260200101516109059190611412565b9050600080828154811061091c5761091b6113b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff021916908360018111156109b0576109af610c28565b5b0217905550600067ffffffffffffffff8111156109d0576109cf610d10565b5b6040519080825280602002602001820160405280156109fe5781602001602082028036833780820191505090505b5060009080519060200190610a14929190610b4d565b50426003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a6490611474565b60006040518083038185875af1925050503d8060008114610aa1576040519150601f19603f3d011682016040523d82523d6000602084013e610aa6565b606091505b5050905080610ae1576040517f5714df0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc6579160200282015b82811115610bc55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b6d565b5b509050610bd39190610bd7565b5090565b5b80821115610bf0576000816000905550600101610bd8565b5090565b6000819050919050565b610c0781610bf4565b82525050565b6000602082019050610c226000830184610bfe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6857610c67610c28565b5b50565b6000819050610c7982610c57565b919050565b6000610c8982610c6b565b9050919050565b610c9981610c7e565b82525050565b6000602082019050610cb46000830184610c90565b92915050565b6000604051905090565b600080fd5b600080fd5b610cd781610bf4565b8114610ce257600080fd5b50565b600081359050610cf481610cce565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4882610cff565b810181811067ffffffffffffffff82111715610d6757610d66610d10565b5b80604052505050565b6000610d7a610cba565b9050610d868282610d3f565b919050565b600067ffffffffffffffff821115610da657610da5610d10565b5b602082029050602081019050919050565b600080fd5b6000610dcf610dca84610d8b565b610d70565b90508083825260208201905060208402830185811115610df257610df1610db7565b5b835b81811015610e1b5780610e078882610ce5565b845260208401935050602081019050610df4565b5050509392505050565b600082601f830112610e3a57610e39610cfa565b5b8135610e4a848260208601610dbc565b91505092915050565b60008060408385031215610e6a57610e69610cc4565b5b6000610e7885828601610ce5565b925050602083013567ffffffffffffffff811115610e9957610e98610cc9565b5b610ea585828601610e25565b9150509250929050565b600080fd5b60008083601f840112610eca57610ec9610cfa565b5b8235905067ffffffffffffffff811115610ee757610ee6610eaf565b5b602083019150836001820283011115610f0357610f02610db7565b5b9250929050565b60008060208385031215610f2157610f20610cc4565b5b600083013567ffffffffffffffff811115610f3f57610f3e610cc9565b5b610f4b85828601610eb4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f8282610f57565b9050919050565b610f9281610f77565b82525050565b6000602082019050610fad6000830184610f89565b92915050565b600080fd5b600067ffffffffffffffff821115610fd357610fd2610d10565b5b610fdc82610cff565b9050602081019050919050565b82818337600083830152505050565b600061100b61100684610fb8565b610d70565b90508281526020810184848401111561102757611026610fb3565b5b611032848285610fe9565b509392505050565b600082601f83011261104f5761104e610cfa565b5b813561105f848260208601610ff8565b91505092915050565b60006020828403121561107e5761107d610cc4565b5b600082013567ffffffffffffffff81111561109c5761109b610cc9565b5b6110a88482850161103a565b91505092915050565b60008115159050919050565b6110c6816110b1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111065780820151818401526020810190506110eb565b60008484015250505050565b600061111d826110cc565b61112781856110d7565b93506111378185602086016110e8565b61114081610cff565b840191505092915050565b600060408201905061116060008301856110bd565b81810360208301526111728184611112565b90509392505050565b60006020828403121561119157611190610cc4565b5b600061119f84828501610ce5565b91505092915050565b60006111b382610f57565b9050919050565b6111c3816111a8565b82525050565b60006020820190506111de60008301846111ba565b92915050565b60006040820190506111f96000830185610f89565b6112066020830184610f89565b9392505050565b60006060820190506112226000830186610bfe565b61122f6020830185610bfe565b61123c6040830184610bfe565b949350505050565b6000819050919050565b61125781611244565b82525050565b600067ffffffffffffffff82169050919050565b61127a8161125d565b82525050565b600061ffff82169050919050565b61129781611280565b82525050565b600063ffffffff82169050919050565b6112b68161129d565b82525050565b600060a0820190506112d1600083018861124e565b6112de6020830187611271565b6112eb604083018661128e565b6112f860608301856112ad565b61130560808301846112ad565b9695505050505050565b60008151905061131e81610cce565b92915050565b60006020828403121561133a57611339610cc4565b5b60006113488482850161130f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061138b82610bf4565b915061139683610bf4565b92508282039050818111156113ae576113ad611351565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061141d82610bf4565b915061142883610bf4565b925082611438576114376113e3565b5b828206905092915050565b600081905092915050565b50565b600061145e600083611443565b91506114698261144e565b600082019050919050565b600061147f82611451565b915081905091905056fea2646970667358221220ccee18e063c7611cccf3c26cd5e5905607c6f39a4a28620f567a15461978974f64736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 253,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 260,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 272,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_isOpen",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 276,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 282,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffle_state",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(RaffleState)279"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)279": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}