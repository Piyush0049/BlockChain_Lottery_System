{
  "address": "0x90d791e553335C90C50894e0F9DCFCCf8219aeDb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entrancefee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_Not_Open",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferUnsuccessful",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "checkUpkeep_Not_Needed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomWords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "raffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "changerafflestate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9abe3a42f1b2b94e7ea861c820ab95583fc57bb2b4183030b5927cfad327d545",
  "receipt": {
    "to": null,
    "from": "0xCC2a0cd3b5762126C460b73417Fe6a3bD0Ef8beD",
    "contractAddress": "0x90d791e553335C90C50894e0F9DCFCCf8219aeDb",
    "transactionIndex": 147,
    "gasUsed": "1323366",
    "logsBloom": "0x
    "blockHash": "0xa5777d3072806c42d2afb12e285dd1091ae147337e48114c67aa9bbf918f97b4",
    "transactionHash": "0x9abe3a42f1b2b94e7ea861c820ab95583fc57bb2b4183030b5927cfad327d545",
    "logs": [],
    "blockNumber": 8013623,
    "cumulativeGasUsed": "32066067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B",
    "10000000000000000",
    "5664947906665132366110571317591926086476359906219000072094485355230762233068",
    "500000",
    "0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae",
    60
  ],
  "numDeployments": 2,
  "solcInputHash": "398865ed62313fc93548072e76bc13c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entrancefee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_Not_Open\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferUnsuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"checkUpkeep_Not_Needed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomWords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"raffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"changerafflestate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\n// Raffle\\r\\n// Enter the lottery (paying some amount)\\r\\n// Pick a random winner (verifiably random)\\r\\n// Winner to be selected every X minutes -> completly automate\\r\\n// Chainlink Oracle -> Randomness, Automated Execution (Chainlink Keepers)\\r\\n\\r\\nerror Raffle__SendMoreToEnterRaffle();\\r\\nevent RequestedRandomWords(uint256 indexed requestId);\\r\\nerror Raffle_TransferUnsuccessful();\\r\\nerror Raffle_Not_Open();\\r\\nerror checkUpkeep_Not_Needed(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 raffleState\\r\\n);\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatible {\\r\\n    uint256 immutable i_entrancefee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint256 private immutable i_subscriptionId;\\r\\n    address payable private recentWinner;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant num_words = 1;\\r\\n    uint16 private constant request_confirmation = 3;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint256 private s_isOpen;\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    RaffleState private s_raffle_state;\\r\\n\\r\\n    event raffleEnter(address indexed player);\\r\\n    event winnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entrancefee,\\r\\n        uint256 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        bytes32 gasLane,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entrancefee = entrancefee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_gasLane = gasLane;\\r\\n        s_raffle_state = RaffleState.OPEN;\\r\\n        i_interval = interval;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory\\r\\n    ) public view override returns (bool upkeepNeeded, bytes memory) {\\r\\n        bool isOpen = (s_raffle_state == RaffleState.OPEN);\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata) external override {\\r\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n    if (!upkeepNeeded) {\\r\\n        revert checkUpkeep_Not_Needed(\\r\\n            address(this).balance,\\r\\n            s_players.length,\\r\\n            uint256(s_raffle_state)\\r\\n        );\\r\\n    }\\r\\n    s_raffle_state = RaffleState.CALCULATING;\\r\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n        i_gasLane,\\r\\n        uint64(i_subscriptionId),\\r\\n        request_confirmation,\\r\\n        i_callbackGasLimit,\\r\\n        num_words\\r\\n    );\\r\\n    emit RequestedRandomWords(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        s_raffle_state = RaffleState.CALCULATING;\\r\\n        uint256 index = randomWords[0] % s_players.length;\\r\\n        address payable randomWinner = s_players[index];\\r\\n        recentWinner = randomWinner;\\r\\n        s_raffle_state = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle_TransferUnsuccessful();\\r\\n        }\\r\\n        emit winnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (s_raffle_state != RaffleState.OPEN) {\\r\\n            revert Raffle_Not_Open();\\r\\n        }\\r\\n        if (msg.value < i_entrancefee) {\\r\\n            revert Raffle__SendMoreToEnterRaffle();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit raffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function changerafflestate() public {\\r\\n        if (s_raffle_state == RaffleState.OPEN) {\\r\\n            s_raffle_state = RaffleState.CALCULATING;\\r\\n        } else {\\r\\n            s_raffle_state = RaffleState.OPEN;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return recentWinner;\\r\\n    }\\r\\n\\r\\n    function getPlayers() public view returns (address payable[] memory) {\\r\\n        return s_players;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffle_state;\\r\\n    }\\r\\n\\r\\n    function getLastTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }    \\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entrancefee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address payable) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x16b9d9d24a23a209542ad84c8218f935051576e54c595cd853b7ea7bcb136120\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b506040516119aa3803806119aa8339818101604052810190610033919061021c565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508263ffffffff166101008163ffffffff16815250508161012081815250506000600460006101000a81548160ff021916908360018111156100f1576100f06102a9565b5b0217905550806101408181525050426003819055505050505050506102d8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014182610116565b9050919050565b61015181610136565b811461015c57600080fd5b50565b60008151905061016e81610148565b92915050565b6000819050919050565b61018781610174565b811461019257600080fd5b50565b6000815190506101a48161017e565b92915050565b600063ffffffff82169050919050565b6101c3816101aa565b81146101ce57600080fd5b50565b6000815190506101e0816101ba565b92915050565b6000819050919050565b6101f9816101e6565b811461020457600080fd5b50565b600081519050610216816101f0565b92915050565b60008060008060008060c0878903121561023957610238610111565b5b600061024789828a0161015f565b965050602061025889828a01610195565b955050604061026989828a01610195565b945050606061027a89828a016101d1565b935050608061028b89828a01610207565b92505060a061029c89828a01610195565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516116636103476000396000818161076701526108fc015260006105fe015260006106420152600061061f015260006105c20152600081816102a0015261040a0152600081816102dd015261033101526116636000f3fe6080604052600436106100a75760003560e01c80636e04ff0d116100645780636e04ff0d146101895780638a84c58e146101c75780638b5b9ccc146101de57806391ad27b414610209578063c1c244e814610234578063e55ae4e81461025f576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063473f1ddc1461015e575b600080fd5b3480156100b857600080fd5b506100c161029c565b6040516100ce9190610cd1565b60405180910390f35b3480156100e357600080fd5b506100ec6102c4565b6040516100f99190610d63565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610f17565b6102db565b005b61013361039b565b005b34801561014157600080fd5b5061015c60048036038101906101579190610fce565b61050a565b005b34801561016a57600080fd5b506101736106fb565b604051610180919061105c565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab919061112c565b610725565b6040516101be92919061120f565b60405180910390f35b3480156101d357600080fd5b506101dc6107d1565b005b3480156101ea57600080fd5b506101f361086a565b604051610200919061130f565b60405180910390f35b34801561021557600080fd5b5061021e6108f8565b60405161022b9190610cd1565b60405180910390f35b34801561024057600080fd5b50610249610920565b6040516102569190610cd1565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190611331565b61092a565b604051610293919061136d565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610384929190611388565b60405180910390fd5b6103978282610971565b5050565b600060018111156103af576103ae610cec565b5b600460009054906101000a900460ff1660018111156103d1576103d0610cec565b5b14610408576040517f286c89dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610462576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b600061052460405180602001604052806000815250610725565b509050806105935747600080549050600460009054906101000a900460ff16600181111561055557610554610cec565b5b6040517f5711a40300000000000000000000000000000000000000000000000000000000815260040161058a939291906113b1565b60405180910390fd5b6001600460006101000a81548160ff021916908360018111156105b9576105b8610cec565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610683959493929190611460565b6020604051808303816000875af11580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c691906114c8565b9050807fc3d0c9fbc1987665462eec0262eb7fc743a27d411fd3a0b9c20c1c64d99347d360405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600080600181111561073e5761073d610cec565b5b600460009054906101000a900460ff1660018111156107605761075f610cec565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426107949190611524565b119050600080600080549050119050600080471190508380156107b45750825b80156107bd5750815b80156107c65750805b955050505050915091565b600060018111156107e5576107e4610cec565b5b600460009054906101000a900460ff16600181111561080757610806610cec565b5b0361083c576001600460006101000a81548160ff0219169083600181111561083257610831610cec565b5b0217905550610868565b6000600460006101000a81548160ff0219169083600181111561086257610861610cec565b5b02179055505b565b606060008054806020026020016040519081016040528092919081815260200182805480156108ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108a4575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b600080828154811061093f5761093e611558565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001600460006101000a81548160ff0219169083600181111561099757610996610cec565b5b021790555060008080549050826000815181106109b7576109b6611558565b5b60200260200101516109c991906115b6565b905060008082815481106109e0576109df611558565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff02191690836001811115610a7457610a73610cec565b5b0217905550600067ffffffffffffffff811115610a9457610a93610dd4565b5b604051908082528060200260200182016040528015610ac25781602001602082028036833780820191505090505b5060009080519060200190610ad8929190610c11565b50426003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610b2890611618565b60006040518083038185875af1925050503d8060008114610b65576040519150601f19603f3d011682016040523d82523d6000602084013e610b6a565b606091505b5050905080610ba5576040517f5714df0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610c8a579160200282015b82811115610c895782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c31565b5b509050610c979190610c9b565b5090565b5b80821115610cb4576000816000905550600101610c9c565b5090565b6000819050919050565b610ccb81610cb8565b82525050565b6000602082019050610ce66000830184610cc2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d2c57610d2b610cec565b5b50565b6000819050610d3d82610d1b565b919050565b6000610d4d82610d2f565b9050919050565b610d5d81610d42565b82525050565b6000602082019050610d786000830184610d54565b92915050565b6000604051905090565b600080fd5b600080fd5b610d9b81610cb8565b8114610da657600080fd5b50565b600081359050610db881610d92565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0c82610dc3565b810181811067ffffffffffffffff82111715610e2b57610e2a610dd4565b5b80604052505050565b6000610e3e610d7e565b9050610e4a8282610e03565b919050565b600067ffffffffffffffff821115610e6a57610e69610dd4565b5b602082029050602081019050919050565b600080fd5b6000610e93610e8e84610e4f565b610e34565b90508083825260208201905060208402830185811115610eb657610eb5610e7b565b5b835b81811015610edf5780610ecb8882610da9565b845260208401935050602081019050610eb8565b5050509392505050565b600082601f830112610efe57610efd610dbe565b5b8135610f0e848260208601610e80565b91505092915050565b60008060408385031215610f2e57610f2d610d88565b5b6000610f3c85828601610da9565b925050602083013567ffffffffffffffff811115610f5d57610f5c610d8d565b5b610f6985828601610ee9565b9150509250929050565b600080fd5b60008083601f840112610f8e57610f8d610dbe565b5b8235905067ffffffffffffffff811115610fab57610faa610f73565b5b602083019150836001820283011115610fc757610fc6610e7b565b5b9250929050565b60008060208385031215610fe557610fe4610d88565b5b600083013567ffffffffffffffff81111561100357611002610d8d565b5b61100f85828601610f78565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110468261101b565b9050919050565b6110568161103b565b82525050565b6000602082019050611071600083018461104d565b92915050565b600080fd5b600067ffffffffffffffff82111561109757611096610dd4565b5b6110a082610dc3565b9050602081019050919050565b82818337600083830152505050565b60006110cf6110ca8461107c565b610e34565b9050828152602081018484840111156110eb576110ea611077565b5b6110f68482856110ad565b509392505050565b600082601f83011261111357611112610dbe565b5b81356111238482602086016110bc565b91505092915050565b60006020828403121561114257611141610d88565b5b600082013567ffffffffffffffff8111156111605761115f610d8d565b5b61116c848285016110fe565b91505092915050565b60008115159050919050565b61118a81611175565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111ca5780820151818401526020810190506111af565b60008484015250505050565b60006111e182611190565b6111eb818561119b565b93506111fb8185602086016111ac565b61120481610dc3565b840191505092915050565b60006040820190506112246000830185611181565b818103602083015261123681846111d6565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006112768261101b565b9050919050565b6112868161126b565b82525050565b6000611298838361127d565b60208301905092915050565b6000602082019050919050565b60006112bc8261123f565b6112c6818561124a565b93506112d18361125b565b8060005b838110156113025781516112e9888261128c565b97506112f4836112a4565b9250506001810190506112d5565b5085935050505092915050565b6000602082019050818103600083015261132981846112b1565b905092915050565b60006020828403121561134757611346610d88565b5b600061135584828501610da9565b91505092915050565b6113678161126b565b82525050565b6000602082019050611382600083018461135e565b92915050565b600060408201905061139d600083018561104d565b6113aa602083018461104d565b9392505050565b60006060820190506113c66000830186610cc2565b6113d36020830185610cc2565b6113e06040830184610cc2565b949350505050565b6000819050919050565b6113fb816113e8565b82525050565b600067ffffffffffffffff82169050919050565b61141e81611401565b82525050565b600061ffff82169050919050565b61143b81611424565b82525050565b600063ffffffff82169050919050565b61145a81611441565b82525050565b600060a08201905061147560008301886113f2565b6114826020830187611415565b61148f6040830186611432565b61149c6060830185611451565b6114a96080830184611451565b9695505050505050565b6000815190506114c281610d92565b92915050565b6000602082840312156114de576114dd610d88565b5b60006114ec848285016114b3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061152f82610cb8565b915061153a83610cb8565b9250828203905081811115611552576115516114f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115c182610cb8565b91506115cc83610cb8565b9250826115dc576115db611587565b5b828206905092915050565b600081905092915050565b50565b60006116026000836115e7565b915061160d826115f2565b600082019050919050565b6000611623826115f5565b915081905091905056fea2646970667358221220aa79590c9a7dc26581118cf2927c5c8369207fb03c1a14215c4c3292090fc7d164736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80636e04ff0d116100645780636e04ff0d146101895780638a84c58e146101c75780638b5b9ccc146101de57806391ad27b414610209578063c1c244e814610234578063e55ae4e81461025f576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063473f1ddc1461015e575b600080fd5b3480156100b857600080fd5b506100c161029c565b6040516100ce9190610cd1565b60405180910390f35b3480156100e357600080fd5b506100ec6102c4565b6040516100f99190610d63565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610f17565b6102db565b005b61013361039b565b005b34801561014157600080fd5b5061015c60048036038101906101579190610fce565b61050a565b005b34801561016a57600080fd5b506101736106fb565b604051610180919061105c565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab919061112c565b610725565b6040516101be92919061120f565b60405180910390f35b3480156101d357600080fd5b506101dc6107d1565b005b3480156101ea57600080fd5b506101f361086a565b604051610200919061130f565b60405180910390f35b34801561021557600080fd5b5061021e6108f8565b60405161022b9190610cd1565b60405180910390f35b34801561024057600080fd5b50610249610920565b6040516102569190610cd1565b60405180910390f35b34801561026b57600080fd5b5061028660048036038101906102819190611331565b61092a565b604051610293919061136d565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610384929190611388565b60405180910390fd5b6103978282610971565b5050565b600060018111156103af576103ae610cec565b5b600460009054906101000a900460ff1660018111156103d1576103d0610cec565b5b14610408576040517f286c89dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610462576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f742d070bf0f3edace132a9da8ba725e8cf99c478869cee7f673ed6085e2f8e6460405160405180910390a2565b600061052460405180602001604052806000815250610725565b509050806105935747600080549050600460009054906101000a900460ff16600181111561055557610554610cec565b5b6040517f5711a40300000000000000000000000000000000000000000000000000000000815260040161058a939291906113b1565b60405180910390fd5b6001600460006101000a81548160ff021916908360018111156105b9576105b8610cec565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610683959493929190611460565b6020604051808303816000875af11580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c691906114c8565b9050807fc3d0c9fbc1987665462eec0262eb7fc743a27d411fd3a0b9c20c1c64d99347d360405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600080600181111561073e5761073d610cec565b5b600460009054906101000a900460ff1660018111156107605761075f610cec565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426107949190611524565b119050600080600080549050119050600080471190508380156107b45750825b80156107bd5750815b80156107c65750805b955050505050915091565b600060018111156107e5576107e4610cec565b5b600460009054906101000a900460ff16600181111561080757610806610cec565b5b0361083c576001600460006101000a81548160ff0219169083600181111561083257610831610cec565b5b0217905550610868565b6000600460006101000a81548160ff0219169083600181111561086257610861610cec565b5b02179055505b565b606060008054806020026020016040519081016040528092919081815260200182805480156108ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108a4575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b600080828154811061093f5761093e611558565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001600460006101000a81548160ff0219169083600181111561099757610996610cec565b5b021790555060008080549050826000815181106109b7576109b6611558565b5b60200260200101516109c991906115b6565b905060008082815481106109e0576109df611558565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff02191690836001811115610a7457610a73610cec565b5b0217905550600067ffffffffffffffff811115610a9457610a93610dd4565b5b604051908082528060200260200182016040528015610ac25781602001602082028036833780820191505090505b5060009080519060200190610ad8929190610c11565b50426003819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610b2890611618565b60006040518083038185875af1925050503d8060008114610b65576040519150601f19603f3d011682016040523d82523d6000602084013e610b6a565b606091505b5050905080610ba5576040517f5714df0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610c8a579160200282015b82811115610c895782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c31565b5b509050610c979190610c9b565b5090565b5b80821115610cb4576000816000905550600101610c9c565b5090565b6000819050919050565b610ccb81610cb8565b82525050565b6000602082019050610ce66000830184610cc2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d2c57610d2b610cec565b5b50565b6000819050610d3d82610d1b565b919050565b6000610d4d82610d2f565b9050919050565b610d5d81610d42565b82525050565b6000602082019050610d786000830184610d54565b92915050565b6000604051905090565b600080fd5b600080fd5b610d9b81610cb8565b8114610da657600080fd5b50565b600081359050610db881610d92565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0c82610dc3565b810181811067ffffffffffffffff82111715610e2b57610e2a610dd4565b5b80604052505050565b6000610e3e610d7e565b9050610e4a8282610e03565b919050565b600067ffffffffffffffff821115610e6a57610e69610dd4565b5b602082029050602081019050919050565b600080fd5b6000610e93610e8e84610e4f565b610e34565b90508083825260208201905060208402830185811115610eb657610eb5610e7b565b5b835b81811015610edf5780610ecb8882610da9565b845260208401935050602081019050610eb8565b5050509392505050565b600082601f830112610efe57610efd610dbe565b5b8135610f0e848260208601610e80565b91505092915050565b60008060408385031215610f2e57610f2d610d88565b5b6000610f3c85828601610da9565b925050602083013567ffffffffffffffff811115610f5d57610f5c610d8d565b5b610f6985828601610ee9565b9150509250929050565b600080fd5b60008083601f840112610f8e57610f8d610dbe565b5b8235905067ffffffffffffffff811115610fab57610faa610f73565b5b602083019150836001820283011115610fc757610fc6610e7b565b5b9250929050565b60008060208385031215610fe557610fe4610d88565b5b600083013567ffffffffffffffff81111561100357611002610d8d565b5b61100f85828601610f78565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110468261101b565b9050919050565b6110568161103b565b82525050565b6000602082019050611071600083018461104d565b92915050565b600080fd5b600067ffffffffffffffff82111561109757611096610dd4565b5b6110a082610dc3565b9050602081019050919050565b82818337600083830152505050565b60006110cf6110ca8461107c565b610e34565b9050828152602081018484840111156110eb576110ea611077565b5b6110f68482856110ad565b509392505050565b600082601f83011261111357611112610dbe565b5b81356111238482602086016110bc565b91505092915050565b60006020828403121561114257611141610d88565b5b600082013567ffffffffffffffff8111156111605761115f610d8d565b5b61116c848285016110fe565b91505092915050565b60008115159050919050565b61118a81611175565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111ca5780820151818401526020810190506111af565b60008484015250505050565b60006111e182611190565b6111eb818561119b565b93506111fb8185602086016111ac565b61120481610dc3565b840191505092915050565b60006040820190506112246000830185611181565b818103602083015261123681846111d6565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006112768261101b565b9050919050565b6112868161126b565b82525050565b6000611298838361127d565b60208301905092915050565b6000602082019050919050565b60006112bc8261123f565b6112c6818561124a565b93506112d18361125b565b8060005b838110156113025781516112e9888261128c565b97506112f4836112a4565b9250506001810190506112d5565b5085935050505092915050565b6000602082019050818103600083015261132981846112b1565b905092915050565b60006020828403121561134757611346610d88565b5b600061135584828501610da9565b91505092915050565b6113678161126b565b82525050565b6000602082019050611382600083018461135e565b92915050565b600060408201905061139d600083018561104d565b6113aa602083018461104d565b9392505050565b60006060820190506113c66000830186610cc2565b6113d36020830185610cc2565b6113e06040830184610cc2565b949350505050565b6000819050919050565b6113fb816113e8565b82525050565b600067ffffffffffffffff82169050919050565b61141e81611401565b82525050565b600061ffff82169050919050565b61143b81611424565b82525050565b600063ffffffff82169050919050565b61145a81611441565b82525050565b600060a08201905061147560008301886113f2565b6114826020830187611415565b61148f6040830186611432565b61149c6060830185611451565b6114a96080830184611451565b9695505050505050565b6000815190506114c281610d92565b92915050565b6000602082840312156114de576114dd610d88565b5b60006114ec848285016114b3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061152f82610cb8565b915061153a83610cb8565b9250828203905081811115611552576115516114f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115c182610cb8565b91506115cc83610cb8565b9250826115dc576115db611587565b5b828206905092915050565b600081905092915050565b50565b60006116026000836115e7565b915061160d826115f2565b600082019050919050565b6000611623826115f5565b915081905091905056fea2646970667358221220aa79590c9a7dc26581118cf2927c5c8369207fb03c1a14215c4c3292090fc7d164736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 253,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 260,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 272,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_isOpen",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 276,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 282,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffle_state",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(RaffleState)279"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)279": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}